// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Order         Order[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    id                String    @id @default(cuid())
    name              String
    small_description String
    description       String
    is_active         Boolean
    image             String?
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    Variant           Variant[]
    Order             Order[]
}

model Variant {
    id            String   @id @default(cuid())
    productId     String
    name          String
    active_period Int
    type          TYPE
    price         BigInt
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    Order   Order[]
}

model Order {
    id        String   @id @default(cuid())
    productId String
    variantId String
    userId    String
    status    STATUS   @default(ORDERED)
    premium   Premium?
    image     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    variant Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Premium {
    id        String   @id @default(cuid())
    email     String
    password  String
    status    PERIOD   @default(ACTIVE)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    order   Order?  @relation(fields: [orderId], references: [id])
    orderId String? @unique
}

enum TYPE {
    SHARED
    DEDICATED
}

enum STATUS {
    ORDERED
    COMPLETED
}

enum PERIOD {
    ACTIVE
    EXPIRED
}
